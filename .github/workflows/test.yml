name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Create virtual environment
      run: |
        cd file-watcher
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Install dependencies
      run: |
        cd file-watcher
        source venv/bin/activate
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        cd file-watcher
        source venv/bin/activate
        flake8 watcher.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 watcher.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        cd file-watcher
        source venv/bin/activate
        black --check --diff watcher.py
    
    - name: Test with pytest
      run: |
        cd file-watcher
        source venv/bin/activate
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./file-watcher/coverage.xml
        flags: python
        name: codecov-python

  test-neovim:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nvim-version: ["v0.8.0", "v0.9.0", "nightly"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Neovim
      uses: rhysd/action-setup-vim@v1
      with:
        neovim: true
        version: ${{ matrix.nvim-version }}
    
    - name: Install plenary.nvim for testing
      run: |
        mkdir -p ~/.local/share/nvim/site/pack/testing/start
        git clone https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/testing/start/plenary.nvim
    
    - name: Run Lua tests
      run: |
        nvim --headless -c "PlenaryBustedDirectory nvim-plugin/tests/ {minimal_init = 'nvim-plugin/tests/minimal_init.vim'}"

  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Neovim
      uses: rhysd/action-setup-vim@v1
      with:
        neovim: true
        version: "stable"
    
    - name: Run integration tests
      run: |
        chmod +x test_integration.sh
        ./test_integration.sh
    
    - name: Test installation script
      run: |
        # Test in a temporary directory
        mkdir -p /tmp/test-install
        cp -r . /tmp/test-install/
        cd /tmp/test-install
        chmod +x install.sh
        # Run install with dry-run simulation
        echo "Testing installation script..."
        bash -x install.sh || echo "Installation test completed"